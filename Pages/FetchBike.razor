@page "/fetchBikes"

<PageTitle>Bikes</PageTitle>

@using BBK_A2_SWE5201_2201525.Data
@using BBK_A2_SWE5201_2201525.Data.BBKDB
@inject bikeTest BikeService
@*

    Using OwningComponentBase ensures that the service and related services

    that share its scope are disposed with the component.

    Otherwise DbContext in bikeTest will live for the life of the

    connection, which may be problematic if clients stay

    connected for a long time.

    We access bikeTest using @Service

*@
@inherits OwningComponentBase<bikeTest>


<h1>Bikes</h1>

<AuthorizeView>
    <Authorized>


        <p>This component demonstrates fetching data from a service.</p>

        @if (bikes == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">

                <thead>

                    <tr>

                        <th>Model</th>

                        <th>Cyclist ID</th>
                        <th>Cyclist</th>
                        <th>Bike's ID'</th>

                    </tr>

                </thead>

                <tbody>

                    @foreach (var bike in bikes)

                    {

                        <tr>

                            <td>@bike.BikeModel</td>
                            <td>@bike.CyclistId</td>
                            <td>@bike.Cyclist.FirstName @bike.Cyclist.LastName</td>
                            <td>@bike.BikeId</td>
                            

                         

                            <td>

                                <!-- Edit the current bike -->

                                <button class="btn btn-primary"
                                        @onclick="(() => EditBike(bike))">

                                    Edit

                                </button>

                            </td>

                        </tr>

                    }

                </tbody>

            </table>

   

            <p>

                <!-- Add a new Bike -->

                <button class="btn btn-success"
                        @onclick="AddNewBike">

                    Add Bike

                </button>

            </p>
            @if (ShowPopup)

            {

                <!-- This is the popup to create or edit a bike -->

                <div class="modal" tabindex="-1" style="display:block" role="dialog">

                    <div class="modal-dialog">

                        <div class="modal-content">

                            <div class="modal-header">

                                <h3 class="modal-title">Edit Bike</h3>

                                <!-- Button to close the popup -->

                                <button type="button" class="close"
                                        @onclick="ClosePopup">

                                    <span aria-hidden="true">X</span>

                                </button>

                            </div>

                            <!-- New Bike -->

                            <div class="modal-body">

                                <input class="form-control" type="text"
                                       placeholder="Model Name ..."
                                       @bind="objBike.BikeModel" />
                                <input class="form-control" type="text"
                                       placeholder="Cyclist's ID...'"
                                       @bind="objBike.CyclistId" />


                                <br />

                                <!-- Button to save the bike -->

                                <button class="btn btn-success"
                                        @onclick="SaveBike">

                                    Save

                                </button>&nbsp;
                                <!-- Only show delete button if not a new record -->
                                @if (objBike.BikeId >= 0)

                                {

                                    <!-- Button to delete the bike -->

                                    <button class="btn btn-danger"
                                            @onclick="DeleteBike">

                                        Delete

                                    </button>

                                }

                            </div>

                        </div>

                    </div>

                </div>

            }

        }

    </Authorized>

    <!-- Show this section if the user is not logged in -->

    <NotAuthorized>

        <p>You're not signed in.</p>

    </NotAuthorized>

</AuthorizeView>

@code {

    // AuthenticationState is available as a CascadingParameter

    [CascadingParameter]

    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    List<Bike> bikes = new List<Bike>();

    private string UserIdentityName = "";

    protected override async Task OnInitializedAsync()

    {

        // Get the current user

        if (authenticationStateTask != null)

        {

            var user = (await authenticationStateTask).User;

            if (user.Identity != null)

            {

                UserIdentityName = user.Identity.Name ?? "";

            }

            bikes = await @Service.GetBikeAsync(UserIdentityName);

        }






    }
    Bike objBike = new Bike();

    bool ShowPopup = false;

    void ClosePopup()

    {

        // Close the Popup

        ShowPopup = false;

    }

    void AddNewBike()

    {

        // Make new forecast

        objBike = new Bike();

        // Set Id to 0 so we know it is a new record

        objBike.BikeId = 0;

        // Open the Popup

        ShowPopup = true;

    }

    async Task SaveBike()

    {

        // Close the Popup

        ShowPopup = false;

        // A new bike will have the Id set to 0

        if (objBike.BikeId == 0)

        {

            // Create new bike

            Bike objNewBike = new Bike();

            objNewBike.BikeModel = objBike.BikeModel;
            objNewBike.CyclistId = objBike.CyclistId;



            // Save the result

            var result =

            @Service.CreateBikeAsync(objNewBike);

        }

        else

        {

            // This is an update
            {

                // This is an update

                var result =

                @Service.UpdateBikeAsync(objBike);

            }


        }

        // Get the bikes for the current user

        bikes =

        await @Service.GetBikeAsync(UserIdentityName);

    }


    void EditBike(Bike bike)

    {

        // Set the selected bike

        // as the current bike

        objBike = bike;

        // Open the Popup

        ShowPopup = true;

    }
    async Task DeleteBike()

    {

        // Close the Popup

        ShowPopup = false;

        // Delete the bike

        var result = @Service.DeleteBikeAsync(objBike);

        // Get the bikes for the current user

        bikes =

        await @Service.GetBikeAsync(UserIdentityName);

    }



}
