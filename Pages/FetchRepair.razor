@page "/fetchRepairs"

<PageTitle>Repairs</PageTitle>

@using BBK_A2_SWE5201_2201525.Data
@using BBK_A2_SWE5201_2201525.Data.BBKDB
@inject repairTest RepairService
@*

    Using OwningComponentBase ensures that the service and related services

    that share its scope are disposed with the component.

    Otherwise DbContext in repairTest will live for the life of the

    connection, which may be problematic if clients stay

    connected for a long time.

    We access repairTest using @Service

*@
@inherits OwningComponentBase<repairTest>

<h1>Repairs</h1>

<AuthorizeView>
    <Authorized>


        <p>This component demonstrates fetching data from a service.</p>

        @if (repairs == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">

                <thead>

                    <tr>

                        <th>Repair Type</th>
                        <th>Repairer</th>
                        <th>Bike Model</th>
                        <th>Bike Owner</th>
                        <th>Part Needed</th>

                        

                    </tr>

                </thead>

                <tbody>

                    @foreach (var repair in repairs)

                    {

                        <tr>

                            <td>@repair.RepairType</td>
                            <td>@repair.Volunteer.VolunteerForename @repair.Volunteer.VolunteerSurname</td>
                            <td>@repair.Bike.BikeModel</td>
                            <td>@repair.Bike.Cyclist.FirstName @repair.Bike.Cyclist.LastName</td>
                            <td>@repair.Part.PartName</td>

                            

                            <td>

                                <!-- Edit the current repair -->

                                <button class="btn btn-primary"
                                        @onclick="(() => EditRepair(repair))">

                                    Edit

                                </button>

                            </td>

                        </tr>

                    }

                </tbody>

            </table>

            <p>

                <!-- Add a new repair -->

                <button class="btn btn-success"
                        @onclick="AddNewRepair">

                    Add Repair

                </button>

            </p>
            @if (ShowPopup)

            {

                <!-- This is the popup to create or edit a repair -->

                <div class="modal" tabindex="-1" style="display:block" role="dialog">

                    <div class="modal-dialog">

                        <div class="modal-content">

                            <div class="modal-header">

                                <h3 class="modal-title">Edit Repair</h3>

                                <!-- Button to close the popup -->

                                <button type="button" class="close"
                                        @onclick="ClosePopup">

                                    <span aria-hidden="true">X</span>

                                </button>

                            </div>

                            <!-- New Repair -->

                            <div class="modal-body">

                                <input class="form-control" type="text"
                                       placeholder="Repair Name..."
                                       @bind="objRepair.RepairType" />
                                <input class="form-control" type="text"
                                       placeholder="Volunteer ID..."
                                       @bind="objRepair.VolunteerId" />
                                <input class="form-control" type="text"
                                       placeholder="Bike ID..."
                                       @bind="objRepair.BikeId" />
                                <input class="form-control" type="text"
                                       placeholder="Part ID..."
                                       @bind="objRepair.PartId" />


                                <br />

                                <!-- Button to save the repair -->

                                <button class="btn btn-success"
                                        @onclick="SaveRepair">

                                    Save

                                </button>&nbsp;
                                <!-- Only show delete button if not a new record -->
                                @if (objRepair.RepairId >= 0)

                                {

                                    <!-- Button to delete the repair -->

                                    <button class="btn btn-danger"
                                            @onclick="DeleteRepair">

                                        Delete

                                    </button>

                                }

                            </div>

                        </div>

                    </div>

                </div>

            }

        }

    </Authorized>

    <!-- Show this section if the user is not logged in -->

    <NotAuthorized>

        <p>You're not signed in.</p>

    </NotAuthorized>

</AuthorizeView>

@code {

    // AuthenticationState is available as a CascadingParameter

    [CascadingParameter]

    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    List<Repair> repairs = new List<Repair>();

    private string UserIdentityName = "";

    protected override async Task OnInitializedAsync()

    {

        // Get the current user

        if (authenticationStateTask != null)

        {

            var user = (await authenticationStateTask).User;

            if (user.Identity != null)

            {

                UserIdentityName = user.Identity.Name ?? "";

            }

            repairs = await @Service.GetRepairAsync(UserIdentityName);

        }






    }
    Repair objRepair = new Repair();

    bool ShowPopup = false;

    void ClosePopup()

    {

        // Close the Popup

        ShowPopup = false;

    }

    void AddNewRepair()

    {

        // Make new repair

        objRepair = new Repair();

        // Set Id to 0 so we know it is a new record

        objRepair.RepairId = 0;

        // Open the Popup

        ShowPopup = true;

    }

    async Task SaveRepair()

    {

        // Close the Popup

        ShowPopup = false;

        // A new repair will have the Id set to 0

        if (objRepair.RepairId == 0)

        {

            // Create new repair

            Repair objNewRepair = new Repair();

            objNewRepair.RepairType = objRepair.RepairType;
            objNewRepair.VolunteerId = objRepair.VolunteerId;
            objNewRepair.BikeId = objRepair.BikeId;
            objNewRepair.PartId = objRepair.PartId;
            objNewRepair.PartId = objRepair.PartId;


            // Save the result

            var result =

            @Service.CreateRepairAsync(objNewRepair);

        }

        else

        {

            // This is an update
            {

                // This is an update

                var result =

                @Service.UpdateRepairAsync(objRepair);

            }


        }

        // Get the repairs for the current user

        repairs =

        await @Service.GetRepairAsync(UserIdentityName);

    }


    void EditRepair(Repair repair)

    {

        // Set the selected repairs

        // as the current repair

        objRepair = repair;

        // Open the Popup

        ShowPopup = true;

    }
    async Task DeleteRepair()

    {

        // Close the Popup

        ShowPopup = false;

        // Delete the repair

        var result = @Service.DeleteRepairAsync(objRepair);

        // Get the repairs for the current user

        repairs =

        await @Service.GetRepairAsync(UserIdentityName);

    }



}
